require "schema_sync/version"
require "schema_sync/model"

# TODO:
# 1. Add 'cleanup' rake method to remove columns and tables
#
module SchemaSync
  # Your code goes here...
  
  class Railtie < Rails::Railtie
    railtie_name :schema_sync
    rake_tasks do
      load File.expand_path("../../tasks/db.rake", __FILE__)
    end
  end

  def self.models
    @models ||= []
  end

  def self.register_model(m)
    if !self.models.include?(m)
      self.models << m
    end
  end

  def self.load_models
    Dir[Rails.root + 'app/models/**/*.rb'].each do |path|
      require path
    end
  end

  def self.logger
    if @logger.nil? && defined?(Rails)
      @logger = Rails.logger
    end
    @logger
  end

  def self.logger=(val)
    @logger = val
  end

  ##
  # Computes changes based on schema and models. For now, this should only
  # determine additions. Removals of tables, columns, or indexes need to
  # be done through a manual migration.
  #
  def self.compute_changes(opts={})
    do_cleanup = opts[:clean] || false
    puts "Loading all models..."
    self.load_models
    puts "Computing changes..."
    changes = []
    existing_table_names = ActiveRecord::Base.connection.tables - ["schema_migrations"]
    model_table_names = self.models.collect {|m| m.table_name}
    schema_columns = self.schema_columns
    model_columns = self.model_columns

    # determine tables needed to add (in models but not in database)
    add_table_names = model_table_names - existing_table_names
    add_table_names.each do |t|
      changes << {action: :create_table, table_name: t}
    end

    # determine columns needed to add
    model_columns.each do |key, c|
      if !(sc = schema_columns[key]).nil?
        # TODO: column exists, check if needs changes
        # check if type or default changed
      else
        changes << {action: :add_column, table_name: c[:table_name], field: c}
      end
    end

    # determine enhancements needed
    self.models.each do |m|
      m.schema_enhancements.each do |e|
        # TODO: handle indexes here
      end
    end

    if do_cleanup
      # determine tables that can be removed
      remove_table_names = existing_table_names - model_table_names
      remove_table_names.each do |t|
        changes << {action: :drop_table, table_name: t}
      end

      # determine fields that can be removed
      schema_columns.each do |key, c|
        next if c[:name] == 'id'
        if model_columns[key].nil? && !remove_table_names.include?(c[:table_name]) && !model_columns.values.any?{|mc| mc[:table_name] == c[:table_name] && mc[:rename_from] && mc[:rename_from].to_s == c[:name].to_s}
          changes << {action: :remove_column, table_name: c[:table_name], column: c[:column]}
        end

      end

    end

    return changes
  end

  def self.schema_columns
    ret = {}
    self.models.each do |m|
      next if !m.table_exists?
      tn = m.table_name
      m.columns.each do |c|
        ret["#{tn}/#{c.name}"] = {table_name: tn, name: c.name, column: c}
      end
    end
    return ret
  end

  def self.model_columns
    ret = {}
    self.models.each do |m|
      tn = m.table_name
      m.schema_fields.values.each do |f|
        k = "#{tn}/#{f[:name]}"
        ret[k] = f
      end
    end
    return ret
  end

  def self.build_migrations(changes, opts={})
    prompt = opts.key?(:prompt) ? opts[:prompt] : false
    write = opts.key?(:write) ? opts[:write] : false
    rs = opts[:hash] || self.random_string

    s = "### Generated by SchemaSync"
    s << "\nclass SchemaSync#{rs.capitalize} < ActiveRecord::Migration"
    s << "\n\tdef change"
    changes.each do |c|
      s << "\n\t\t"
      case c[:action]
      when :create_table
        s << "create_table :#{c[:table_name]}"
      when :drop_table
        s << "drop_table :#{c[:table_name]}"
      when :add_column
        f = c[:field]
        copts = f.except(:name, :type, :table_name, :schema_type)
        if f[:rename_from]
          s << "rename_column :#{f[:table_name]}, :#{f[:rename_from]}, :#{f[:name]}"
        else
          s << "add_column :#{f[:table_name]}, :#{f[:name]}, :#{f[:schema_type]}"
          if !copts.empty?
            s << ", #{copts}"
          end
        end
      when :remove_column
        cl = c[:column]
        s << "remove_column :#{c[:table_name]}, :#{cl.name}"
      when :add_timestamps
        s << "add_timestamps :#{c[:table_name]}"
        copts = c[:opts]
        if !copts.empty?
          s << ", #{copts}"
        end
      end
    end
    s << "\n\tend"
    s << "\nend"
    if write == true
      dir = File.join Rails.root, "db", "migrate"
      timestamp = Time.now.strftime("%Y%m%d%H%M%S")
      fn = File.join dir, "#{timestamp}_schema_sync_#{rs}.rb"
      FileUtils.mkdir_p dir
      File.open fn, "w" do |f|
        f.write(s)
      end
      return {text: s, filename: fn}
    else 
      return {text: s}
    end
  end

  def self.schema_type_for(type)
    case type.to_s
    when "Time"
      :datetime
    when "Hash"
      :jsonb
    when "Float"
      :decimal
    else
      type.to_s.downcase.to_sym
    end
  end

  def self.random_string(len=5)
    ('a'..'z').to_a.shuffle[0,len].join
  end

end
